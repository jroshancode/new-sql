# 2025 - 09 - 04 

üìò MySQL Data Types Concepts

MySQL data types are grouped into five main categories:

1. Numeric Types (INT, DECIMAL, FLOAT, etc.)

2. Date & Time Types (DATE, DATETIME, etc.)

3. String Types (CHAR, VARCHAR, TEXT, etc.)

4. JSON Type

5. Spatial / Geometry Types (POINT, POLYGON, etc.)


1Ô∏è‚É£ Numeric Data Types
üîπ Integer Types

| Type              | Storage | Range (SIGNED)                  | Range (UNSIGNED)   |
| ----------------- | ------- | ------------------------------- | ------------------ |
| **TINYINT**       | 1 byte  | -128 to 127                     | 0 to 255           |
| **SMALLINT**      | 2 bytes | -32,768 to 32,767               | 0 to 65,535        |
| **MEDIUMINT**     | 3 bytes | -8,388,608 to 8,388,607         | 0 to 16,777,215    |
| **INT / INTEGER** | 4 bytes | -2,147,483,648 to 2,147,483,647 | 0 to 4,294,967,295 |
| **BIGINT**        | 8 bytes | -(2^63) to (2^63 -1)            | 0 to 2^64-1        |


CREATE TABLE numbers_test (
    id INT PRIMARY KEY AUTO_INCREMENT,
    small_num TINYINT,
    big_num BIGINT
);

üîπ Fixed-point (Exact)

DECIMAL(M,D) or NUMERIC(M,D)

M = total digits

D = digits after decimal

Stored as string, not floating-point ‚Üí best for money, financial values.

price DECIMAL(10,2)  -- up to 99999999.99


üîπ Floating-point (Approximate)

| Type          | Storage | Precision      |
| ------------- | ------- | -------------- |
| FLOAT         | 4 bytes | \~7 digits     |
| DOUBLE / REAL | 8 bytes | \~15-16 digits |

temperature FLOAT,
distance DOUBLE


üîπ Bit & Boolean

BIT(M) ‚Äì stores binary values (M = 1 to 64 bits)

BOOLEAN ‚Äì alias for TINYINT(1) (0 = false, 1 = true)

is_active BOOLEAN,
flags BIT(4)  -- 4-bit binary


2Ô∏è‚É£ Date & Time Data Types

| Type          | Storage | Range                                      | Format                  |
| ------------- | ------- | ------------------------------------------ | ----------------------- |
| **DATE**      | 3 bytes | 1000-01-01 to 9999-12-31                   | 'YYYY-MM-DD'            |
| **DATETIME**  | 8 bytes | 1000-01-01 00:00:00 to 9999-12-31 23:59:59 | 'YYYY-MM-DD HH\:MM\:SS' |
| **TIMESTAMP** | 4 bytes | 1970-01-01 UTC to 2038-01-19 UTC           | 'YYYY-MM-DD HH\:MM\:SS' |
| **TIME**      | 3 bytes | -838:59:59 to 838:59:59                    | 'HH\:MM\:SS'            |
| **YEAR**      | 1 byte  | 1901 to 2155                               | 'YYYY'                  |


order_date DATE,
created_at DATETIME,
last_login TIMESTAMP DEFAULT CURRENT_TIMESTAMP



3Ô∏è‚É£ String Data Types
üîπ Fixed-Length

CHAR(M) ‚Üí fixed length (1‚Äì255), pads with spaces
Example: CHAR(10) always stores 10 characters.

üîπ Variable-Length

VARCHAR(M) ‚Üí variable length (1‚Äì65535, depends on row size)
Example: VARCHAR(100) ‚Üí up to 100 characters.


üîπ ENUM & SET

ENUM ‚Äì predefined list, one value only
status ENUM('pending','shipped','delivered','cancelled')

SET ‚Äì predefined list, can store multiple values

tags SET('sports','tech','music','travel')


  4Ô∏è‚É£ JSON Data Type (MySQL 5.7+)

Used for structured JSON documents

Supports indexing, searching, validation

CREATE TABLE products (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100),
    attributes JSON
);

INSERT INTO products (name, attributes) VALUES
('Laptop', '{"brand": "Dell", "ram": "16GB"}'),
('Phone', '{"brand": "Apple", "ram": "8GB"}');



üéØ Choosing the Right Data Type

Use INT for IDs, counts

Use BIGINT for large IDs (e.g., social media users)

Use DECIMAL for money/financials

Use VARCHAR for strings (but size carefully)

Use TEXT/BLOB for long text/files

Use DATE/DATETIME for historical logs

Use TIMESTAMP when you need timezone handling

Use ENUM/SET for controlled categories

